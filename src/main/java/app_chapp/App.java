package app_chapp;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Created by Igor Konovalov on 19.11.2017.
 */
public class App {

    private static final Logger LOGGER = Logger.getLogger(App.class.getName());

    public static void main(String[] args) {

        LOGGER.setUseParentHandlers(false);
        LogFormatter lf = new LogFormatter();
        LOGGER.setLevel(Level.CONFIG);
        FileHandler fh = null;
        try {
            fh = new FileHandler("logs/app.log");
        } catch (IOException e) {
            e.printStackTrace();
        }
        fh.setFormatter(lf);
        LOGGER.addHandler(fh);

        // Declaration part for client & server
        Client client = new Client();
        Server server = new Server();
        LOGGER.info("Client and Server created");

        // Server Initialization
        try {
            LOGGER.log(Level.CONFIG,"Initializing server");
            server.init();
        } catch (FileNotFoundException e) {
            LOGGER.log(Level.SEVERE,"File with db not found");
            System.exit(1);
        } catch (IOException e) {
            LOGGER.log(Level.SEVERE,"Database is broken");
            System.exit(2);
        }

        // Client Inizialization
        int choice = -1;
        System.out.println("Please, choose one of the suggested variants:");
        System.out.print("\t0:  login ;\n\t1:   register.\nChoice:  ");
        while (true) {
            try {
                Scanner sc = new Scanner(System.in);
                choice = Integer.parseInt(sc.nextLine());
            } catch (NumberFormatException e) {
                LOGGER.log(Level.SEVERE, "Unexpected exception", e);
                choice = -1;
            }

            if (choice == -1)
                System.out.print("Incorrect! Try again:  ");
            else
                break;
        }

        try {
            LOGGER.log(Level.INFO, "User chosed {0}", choice);
            if (choice == 0)
                client = login(client);
            else {
                server = register(server);
                //server.init();
                System.out.println("Success! Now u can login!");
                client = login(client);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Declaration part for pipe channel
        LOGGER.log(Level.INFO,"Pipe created");
        PipeChannel pipeChannel = new PipeChannel(client,server);

        // Authentification process
        LOGGER.log(Level.INFO,"Auth process started");
        pipeChannel.process();

        // End Session
        pipeChannel.endSession();
        LOGGER.log(Level.INFO,"Auth session ended successfully");

        System.out.println("Closing session..");
    }

    private static Client login(Client client) throws IOException {
        String i = "";
        String p = "";

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        System.out.print("Login:  ");
        i = br.readLine();
        LOGGER.log(Level.INFO,"Login was put");
        System.out.print("Password:  ");
        p = br.readLine();
        LOGGER.log(Level.INFO,"Password was put");

        Client tempClient = client;
        tempClient.setId(i);
        tempClient.setPwd(p);
        LOGGER.log(Level.INFO,"Fields were setted to Client");
        return tempClient;
    }

    private static Server register(Server server) throws IOException {
        Scanner scanner = new Scanner(System.in);

        String i = "";
        System.out.print("Login:  ");
        i = scanner.nextLine();
        LOGGER.log(Level.INFO,"Login was put");
        System.out.print("OK, your password is : ");
        System.out.println(server.updateDB(i));
        LOGGER.log(Level.INFO,"Password was generated by Server");
        return server;
    }
}
